// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using bugspotAPI.Data;

namespace bugspotAPI.Migrations
{
    [DbContext(typeof(BugspotContext))]
    [Migration("20211120060354_FirstCreate")]
    partial class FirstCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("bugspotAPI.Models.AttachmentModel", b =>
                {
                    b.Property<int>("attachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("bugId")
                        .HasColumnType("int");

                    b.Property<string>("fileExtension")
                        .HasColumnType("varchar(50)");

                    b.Property<byte[]>("imageData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("imageName")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset>("uploaded")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("userId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("attachmentId");

                    b.HasIndex("bugId");

                    b.HasIndex("userId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("bugspotAPI.Models.BugModel", b =>
                {
                    b.Property<int>("bugId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("actualRes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("archived")
                        .HasColumnType("bit");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("developerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("expectedRes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("lastMod")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("openDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("priorityId")
                        .HasColumnType("int");

                    b.Property<int>("projectId")
                        .HasColumnType("int");

                    b.Property<string>("reporterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("severityId")
                        .HasColumnType("int");

                    b.Property<int>("statusId")
                        .HasColumnType("int");

                    b.Property<string>("stepsToProd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<int>("typeId")
                        .HasColumnType("int");

                    b.HasKey("bugId");

                    b.HasIndex("developerId");

                    b.HasIndex("priorityId");

                    b.HasIndex("projectId");

                    b.HasIndex("reporterId");

                    b.HasIndex("severityId");

                    b.HasIndex("statusId");

                    b.HasIndex("typeId");

                    b.ToTable("Bugs");
                });

            modelBuilder.Entity("bugspotAPI.Models.CommentModel", b =>
                {
                    b.Property<int>("commentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("bugId")
                        .HasColumnType("int");

                    b.Property<string>("content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("writenDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("commentId");

                    b.HasIndex("bugId");

                    b.HasIndex("userId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("bugspotAPI.Models.CompanyModel", b =>
                {
                    b.Property<int>("companyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("coDescription")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("coName")
                        .HasColumnType("varchar(50)");

                    b.HasKey("companyId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("bugspotAPI.Models.HistModel", b =>
                {
                    b.Property<int>("historyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("bugId")
                        .HasColumnType("int");

                    b.Property<string>("changedItem")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset>("modDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("newValue")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("oldValue")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("userId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("historyId");

                    b.HasIndex("bugId");

                    b.HasIndex("userId");

                    b.ToTable("History");
                });

            modelBuilder.Entity("bugspotAPI.Models.InviteModel", b =>
                {
                    b.Property<int>("inviteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<int>("companyId")
                        .HasColumnType("int");

                    b.Property<Guid>("companyToken")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("inviteDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("inviteeEmail")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("inviteeFName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("inviteeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("inviteeLName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("invitorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("joinDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("projectId")
                        .HasColumnType("int");

                    b.HasKey("inviteId");

                    b.HasIndex("companyId");

                    b.HasIndex("inviteeId");

                    b.HasIndex("invitorId");

                    b.HasIndex("projectId");

                    b.ToTable("Invites");
                });

            modelBuilder.Entity("bugspotAPI.Models.NotifiModel", b =>
                {
                    b.Property<int>("notificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("bugId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("message")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("receiverId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("senderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("viewed")
                        .HasColumnType("bit");

                    b.HasKey("notificationId");

                    b.HasIndex("bugId");

                    b.HasIndex("receiverId");

                    b.HasIndex("senderId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("bugspotAPI.Models.PriorityModel", b =>
                {
                    b.Property<int>("priorityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("priorityName")
                        .HasColumnType("varchar(50)");

                    b.HasKey("priorityId");

                    b.ToTable("Priorities");
                });

            modelBuilder.Entity("bugspotAPI.Models.ProjectModel", b =>
                {
                    b.Property<int>("projectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("UserModelId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("archived")
                        .HasColumnType("bit");

                    b.Property<int?>("companyId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("endDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("projDescription")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("projName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset>("startDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("projectId");

                    b.HasIndex("UserModelId");

                    b.HasIndex("companyId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("bugspotAPI.Models.SeverityModel", b =>
                {
                    b.Property<int>("severityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("severityName")
                        .HasColumnType("varchar(50)");

                    b.HasKey("severityId");

                    b.ToTable("Severities");
                });

            modelBuilder.Entity("bugspotAPI.Models.StatusModel", b =>
                {
                    b.Property<int>("statusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("statusName")
                        .HasColumnType("varchar(50)");

                    b.HasKey("statusId");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("bugspotAPI.Models.TypeModel", b =>
                {
                    b.Property<int>("typeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("typeName")
                        .HasColumnType("varchar(50)");

                    b.HasKey("typeId");

                    b.ToTable("Types");
                });

            modelBuilder.Entity("bugspotAPI.Models.UserModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("companyId")
                        .HasColumnType("int");

                    b.Property<string>("fName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("fileExtension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("imageData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("imageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("companyId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("bugspotAPI.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("bugspotAPI.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bugspotAPI.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("bugspotAPI.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("bugspotAPI.Models.AttachmentModel", b =>
                {
                    b.HasOne("bugspotAPI.Models.BugModel", "bug")
                        .WithMany("attachments")
                        .HasForeignKey("bugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bugspotAPI.Models.UserModel", "user")
                        .WithMany()
                        .HasForeignKey("userId");

                    b.Navigation("bug");

                    b.Navigation("user");
                });

            modelBuilder.Entity("bugspotAPI.Models.BugModel", b =>
                {
                    b.HasOne("bugspotAPI.Models.UserModel", "developer")
                        .WithMany()
                        .HasForeignKey("developerId");

                    b.HasOne("bugspotAPI.Models.PriorityModel", "priority")
                        .WithMany()
                        .HasForeignKey("priorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bugspotAPI.Models.ProjectModel", "project")
                        .WithMany("bugs")
                        .HasForeignKey("projectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bugspotAPI.Models.UserModel", "reporter")
                        .WithMany()
                        .HasForeignKey("reporterId");

                    b.HasOne("bugspotAPI.Models.SeverityModel", "severity")
                        .WithMany()
                        .HasForeignKey("severityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bugspotAPI.Models.StatusModel", "status")
                        .WithMany()
                        .HasForeignKey("statusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bugspotAPI.Models.TypeModel", "type")
                        .WithMany()
                        .HasForeignKey("typeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("developer");

                    b.Navigation("priority");

                    b.Navigation("project");

                    b.Navigation("reporter");

                    b.Navigation("severity");

                    b.Navigation("status");

                    b.Navigation("type");
                });

            modelBuilder.Entity("bugspotAPI.Models.CommentModel", b =>
                {
                    b.HasOne("bugspotAPI.Models.BugModel", "bug")
                        .WithMany("comments")
                        .HasForeignKey("bugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bugspotAPI.Models.UserModel", "user")
                        .WithMany()
                        .HasForeignKey("userId");

                    b.Navigation("bug");

                    b.Navigation("user");
                });

            modelBuilder.Entity("bugspotAPI.Models.HistModel", b =>
                {
                    b.HasOne("bugspotAPI.Models.BugModel", "bug")
                        .WithMany("history")
                        .HasForeignKey("bugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bugspotAPI.Models.UserModel", "user")
                        .WithMany()
                        .HasForeignKey("userId");

                    b.Navigation("bug");

                    b.Navigation("user");
                });

            modelBuilder.Entity("bugspotAPI.Models.InviteModel", b =>
                {
                    b.HasOne("bugspotAPI.Models.CompanyModel", "company")
                        .WithMany()
                        .HasForeignKey("companyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bugspotAPI.Models.UserModel", "invitee")
                        .WithMany()
                        .HasForeignKey("inviteeId");

                    b.HasOne("bugspotAPI.Models.UserModel", "invitor")
                        .WithMany()
                        .HasForeignKey("invitorId");

                    b.HasOne("bugspotAPI.Models.ProjectModel", "project")
                        .WithMany()
                        .HasForeignKey("projectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("company");

                    b.Navigation("invitee");

                    b.Navigation("invitor");

                    b.Navigation("project");
                });

            modelBuilder.Entity("bugspotAPI.Models.NotifiModel", b =>
                {
                    b.HasOne("bugspotAPI.Models.BugModel", "bug")
                        .WithMany("notifications")
                        .HasForeignKey("bugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bugspotAPI.Models.UserModel", "receiver")
                        .WithMany()
                        .HasForeignKey("receiverId");

                    b.HasOne("bugspotAPI.Models.UserModel", "sender")
                        .WithMany()
                        .HasForeignKey("senderId");

                    b.Navigation("bug");

                    b.Navigation("receiver");

                    b.Navigation("sender");
                });

            modelBuilder.Entity("bugspotAPI.Models.ProjectModel", b =>
                {
                    b.HasOne("bugspotAPI.Models.UserModel", null)
                        .WithMany("projects")
                        .HasForeignKey("UserModelId");

                    b.HasOne("bugspotAPI.Models.CompanyModel", "company")
                        .WithMany("projects")
                        .HasForeignKey("companyId");

                    b.Navigation("company");
                });

            modelBuilder.Entity("bugspotAPI.Models.UserModel", b =>
                {
                    b.HasOne("bugspotAPI.Models.CompanyModel", "company")
                        .WithMany("members")
                        .HasForeignKey("companyId");

                    b.Navigation("company");
                });

            modelBuilder.Entity("bugspotAPI.Models.BugModel", b =>
                {
                    b.Navigation("attachments");

                    b.Navigation("comments");

                    b.Navigation("history");

                    b.Navigation("notifications");
                });

            modelBuilder.Entity("bugspotAPI.Models.CompanyModel", b =>
                {
                    b.Navigation("members");

                    b.Navigation("projects");
                });

            modelBuilder.Entity("bugspotAPI.Models.ProjectModel", b =>
                {
                    b.Navigation("bugs");
                });

            modelBuilder.Entity("bugspotAPI.Models.UserModel", b =>
                {
                    b.Navigation("projects");
                });
#pragma warning restore 612, 618
        }
    }
}
